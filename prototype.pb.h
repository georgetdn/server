// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prototype.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prototype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prototype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prototype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prototype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prototype_2eproto;
namespace TDNSYSpkg {
class FourVarReply;
struct FourVarReplyDefaultTypeInternal;
extern FourVarReplyDefaultTypeInternal _FourVarReply_default_instance_;
class FourVarRequest;
struct FourVarRequestDefaultTypeInternal;
extern FourVarRequestDefaultTypeInternal _FourVarRequest_default_instance_;
class InitalReplay;
struct InitalReplayDefaultTypeInternal;
extern InitalReplayDefaultTypeInternal _InitalReplay_default_instance_;
class InitalRequest;
struct InitalRequestDefaultTypeInternal;
extern InitalRequestDefaultTypeInternal _InitalRequest_default_instance_;
class OneVarReply;
struct OneVarReplyDefaultTypeInternal;
extern OneVarReplyDefaultTypeInternal _OneVarReply_default_instance_;
class OneVarRequest;
struct OneVarRequestDefaultTypeInternal;
extern OneVarRequestDefaultTypeInternal _OneVarRequest_default_instance_;
class ThreeVarReply;
struct ThreeVarReplyDefaultTypeInternal;
extern ThreeVarReplyDefaultTypeInternal _ThreeVarReply_default_instance_;
class ThreeVarRequest;
struct ThreeVarRequestDefaultTypeInternal;
extern ThreeVarRequestDefaultTypeInternal _ThreeVarRequest_default_instance_;
class TwoVarReply;
struct TwoVarReplyDefaultTypeInternal;
extern TwoVarReplyDefaultTypeInternal _TwoVarReply_default_instance_;
class TwoVarRequest;
struct TwoVarRequestDefaultTypeInternal;
extern TwoVarRequestDefaultTypeInternal _TwoVarRequest_default_instance_;
}  // namespace TDNSYSpkg
PROTOBUF_NAMESPACE_OPEN
template<> ::TDNSYSpkg::FourVarReply* Arena::CreateMaybeMessage<::TDNSYSpkg::FourVarReply>(Arena*);
template<> ::TDNSYSpkg::FourVarRequest* Arena::CreateMaybeMessage<::TDNSYSpkg::FourVarRequest>(Arena*);
template<> ::TDNSYSpkg::InitalReplay* Arena::CreateMaybeMessage<::TDNSYSpkg::InitalReplay>(Arena*);
template<> ::TDNSYSpkg::InitalRequest* Arena::CreateMaybeMessage<::TDNSYSpkg::InitalRequest>(Arena*);
template<> ::TDNSYSpkg::OneVarReply* Arena::CreateMaybeMessage<::TDNSYSpkg::OneVarReply>(Arena*);
template<> ::TDNSYSpkg::OneVarRequest* Arena::CreateMaybeMessage<::TDNSYSpkg::OneVarRequest>(Arena*);
template<> ::TDNSYSpkg::ThreeVarReply* Arena::CreateMaybeMessage<::TDNSYSpkg::ThreeVarReply>(Arena*);
template<> ::TDNSYSpkg::ThreeVarRequest* Arena::CreateMaybeMessage<::TDNSYSpkg::ThreeVarRequest>(Arena*);
template<> ::TDNSYSpkg::TwoVarReply* Arena::CreateMaybeMessage<::TDNSYSpkg::TwoVarReply>(Arena*);
template<> ::TDNSYSpkg::TwoVarRequest* Arena::CreateMaybeMessage<::TDNSYSpkg::TwoVarRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TDNSYSpkg {

// ===================================================================

class InitalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.InitalRequest) */ {
 public:
  inline InitalRequest() : InitalRequest(nullptr) {}
  ~InitalRequest() override;
  explicit constexpr InitalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitalRequest(const InitalRequest& from);
  InitalRequest(InitalRequest&& from) noexcept
    : InitalRequest() {
    *this = ::std::move(from);
  }

  inline InitalRequest& operator=(const InitalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitalRequest& operator=(InitalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitalRequest* internal_default_instance() {
    return reinterpret_cast<const InitalRequest*>(
               &_InitalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitalRequest& a, InitalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitalRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.InitalRequest";
  }
  protected:
  explicit InitalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kPinFieldNumber = 2,
    kCertFieldNumber = 3,
    kNoteFieldNumber = 4,
  };
  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string pin = 2;
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // string cert = 3;
  void clear_cert();
  const std::string& cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cert();
  PROTOBUF_NODISCARD std::string* release_cert();
  void set_allocated_cert(std::string* cert);
  private:
  const std::string& _internal_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cert(const std::string& value);
  std::string* _internal_mutable_cert();
  public:

  // string note = 4;
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.InitalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class InitalReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.InitalReplay) */ {
 public:
  inline InitalReplay() : InitalReplay(nullptr) {}
  ~InitalReplay() override;
  explicit constexpr InitalReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitalReplay(const InitalReplay& from);
  InitalReplay(InitalReplay&& from) noexcept
    : InitalReplay() {
    *this = ::std::move(from);
  }

  inline InitalReplay& operator=(const InitalReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitalReplay& operator=(InitalReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitalReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitalReplay* internal_default_instance() {
    return reinterpret_cast<const InitalReplay*>(
               &_InitalReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitalReplay& a, InitalReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(InitalReplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitalReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitalReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitalReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitalReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitalReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitalReplay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.InitalReplay";
  }
  protected:
  explicit InitalReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTDNsignFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // string TDNsign = 1;
  void clear_tdnsign();
  const std::string& tdnsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tdnsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tdnsign();
  PROTOBUF_NODISCARD std::string* release_tdnsign();
  void set_allocated_tdnsign(std::string* tdnsign);
  private:
  const std::string& _internal_tdnsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tdnsign(const std::string& value);
  std::string* _internal_mutable_tdnsign();
  public:

  // string ret = 2;
  void clear_ret();
  const std::string& ret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret();
  PROTOBUF_NODISCARD std::string* release_ret();
  void set_allocated_ret(std::string* ret);
  private:
  const std::string& _internal_ret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret(const std::string& value);
  std::string* _internal_mutable_ret();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.InitalReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tdnsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class OneVarRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.OneVarRequest) */ {
 public:
  inline OneVarRequest() : OneVarRequest(nullptr) {}
  ~OneVarRequest() override;
  explicit constexpr OneVarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneVarRequest(const OneVarRequest& from);
  OneVarRequest(OneVarRequest&& from) noexcept
    : OneVarRequest() {
    *this = ::std::move(from);
  }

  inline OneVarRequest& operator=(const OneVarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneVarRequest& operator=(OneVarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneVarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneVarRequest* internal_default_instance() {
    return reinterpret_cast<const OneVarRequest*>(
               &_OneVarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneVarRequest& a, OneVarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OneVarRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneVarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneVarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneVarRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneVarRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneVarRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneVarRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.OneVarRequest";
  }
  protected:
  explicit OneVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
  };
  // string var = 1;
  void clear_var();
  const std::string& var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var();
  PROTOBUF_NODISCARD std::string* release_var();
  void set_allocated_var(std::string* var);
  private:
  const std::string& _internal_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var(const std::string& value);
  std::string* _internal_mutable_var();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.OneVarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class OneVarReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.OneVarReply) */ {
 public:
  inline OneVarReply() : OneVarReply(nullptr) {}
  ~OneVarReply() override;
  explicit constexpr OneVarReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneVarReply(const OneVarReply& from);
  OneVarReply(OneVarReply&& from) noexcept
    : OneVarReply() {
    *this = ::std::move(from);
  }

  inline OneVarReply& operator=(const OneVarReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneVarReply& operator=(OneVarReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneVarReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneVarReply* internal_default_instance() {
    return reinterpret_cast<const OneVarReply*>(
               &_OneVarReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OneVarReply& a, OneVarReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OneVarReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneVarReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneVarReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneVarReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneVarReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneVarReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneVarReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.OneVarReply";
  }
  protected:
  explicit OneVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
  };
  // string var = 1;
  void clear_var();
  const std::string& var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var();
  PROTOBUF_NODISCARD std::string* release_var();
  void set_allocated_var(std::string* var);
  private:
  const std::string& _internal_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var(const std::string& value);
  std::string* _internal_mutable_var();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.OneVarReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class TwoVarRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.TwoVarRequest) */ {
 public:
  inline TwoVarRequest() : TwoVarRequest(nullptr) {}
  ~TwoVarRequest() override;
  explicit constexpr TwoVarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwoVarRequest(const TwoVarRequest& from);
  TwoVarRequest(TwoVarRequest&& from) noexcept
    : TwoVarRequest() {
    *this = ::std::move(from);
  }

  inline TwoVarRequest& operator=(const TwoVarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoVarRequest& operator=(TwoVarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwoVarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwoVarRequest* internal_default_instance() {
    return reinterpret_cast<const TwoVarRequest*>(
               &_TwoVarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TwoVarRequest& a, TwoVarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoVarRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwoVarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwoVarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwoVarRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwoVarRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TwoVarRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoVarRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.TwoVarRequest";
  }
  protected:
  explicit TwoVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.TwoVarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class TwoVarReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.TwoVarReply) */ {
 public:
  inline TwoVarReply() : TwoVarReply(nullptr) {}
  ~TwoVarReply() override;
  explicit constexpr TwoVarReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwoVarReply(const TwoVarReply& from);
  TwoVarReply(TwoVarReply&& from) noexcept
    : TwoVarReply() {
    *this = ::std::move(from);
  }

  inline TwoVarReply& operator=(const TwoVarReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoVarReply& operator=(TwoVarReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwoVarReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwoVarReply* internal_default_instance() {
    return reinterpret_cast<const TwoVarReply*>(
               &_TwoVarReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TwoVarReply& a, TwoVarReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoVarReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwoVarReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwoVarReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwoVarReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwoVarReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TwoVarReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoVarReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.TwoVarReply";
  }
  protected:
  explicit TwoVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.TwoVarReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class ThreeVarRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.ThreeVarRequest) */ {
 public:
  inline ThreeVarRequest() : ThreeVarRequest(nullptr) {}
  ~ThreeVarRequest() override;
  explicit constexpr ThreeVarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreeVarRequest(const ThreeVarRequest& from);
  ThreeVarRequest(ThreeVarRequest&& from) noexcept
    : ThreeVarRequest() {
    *this = ::std::move(from);
  }

  inline ThreeVarRequest& operator=(const ThreeVarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreeVarRequest& operator=(ThreeVarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreeVarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreeVarRequest* internal_default_instance() {
    return reinterpret_cast<const ThreeVarRequest*>(
               &_ThreeVarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ThreeVarRequest& a, ThreeVarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreeVarRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreeVarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreeVarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreeVarRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreeVarRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThreeVarRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreeVarRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.ThreeVarRequest";
  }
  protected:
  explicit ThreeVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
    kVar3FieldNumber = 3,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // string var3 = 3;
  void clear_var3();
  const std::string& var3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var3();
  PROTOBUF_NODISCARD std::string* release_var3();
  void set_allocated_var3(std::string* var3);
  private:
  const std::string& _internal_var3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var3(const std::string& value);
  std::string* _internal_mutable_var3();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.ThreeVarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class ThreeVarReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.ThreeVarReply) */ {
 public:
  inline ThreeVarReply() : ThreeVarReply(nullptr) {}
  ~ThreeVarReply() override;
  explicit constexpr ThreeVarReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreeVarReply(const ThreeVarReply& from);
  ThreeVarReply(ThreeVarReply&& from) noexcept
    : ThreeVarReply() {
    *this = ::std::move(from);
  }

  inline ThreeVarReply& operator=(const ThreeVarReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreeVarReply& operator=(ThreeVarReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreeVarReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreeVarReply* internal_default_instance() {
    return reinterpret_cast<const ThreeVarReply*>(
               &_ThreeVarReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ThreeVarReply& a, ThreeVarReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreeVarReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreeVarReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreeVarReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreeVarReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreeVarReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThreeVarReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreeVarReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.ThreeVarReply";
  }
  protected:
  explicit ThreeVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
    kVar3FieldNumber = 3,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // string var3 = 3;
  void clear_var3();
  const std::string& var3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var3();
  PROTOBUF_NODISCARD std::string* release_var3();
  void set_allocated_var3(std::string* var3);
  private:
  const std::string& _internal_var3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var3(const std::string& value);
  std::string* _internal_mutable_var3();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.ThreeVarReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class FourVarRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.FourVarRequest) */ {
 public:
  inline FourVarRequest() : FourVarRequest(nullptr) {}
  ~FourVarRequest() override;
  explicit constexpr FourVarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FourVarRequest(const FourVarRequest& from);
  FourVarRequest(FourVarRequest&& from) noexcept
    : FourVarRequest() {
    *this = ::std::move(from);
  }

  inline FourVarRequest& operator=(const FourVarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FourVarRequest& operator=(FourVarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FourVarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FourVarRequest* internal_default_instance() {
    return reinterpret_cast<const FourVarRequest*>(
               &_FourVarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FourVarRequest& a, FourVarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FourVarRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FourVarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FourVarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FourVarRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FourVarRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FourVarRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FourVarRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.FourVarRequest";
  }
  protected:
  explicit FourVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
    kVar3FieldNumber = 3,
    kVar4FieldNumber = 4,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // string var3 = 3;
  void clear_var3();
  const std::string& var3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var3();
  PROTOBUF_NODISCARD std::string* release_var3();
  void set_allocated_var3(std::string* var3);
  private:
  const std::string& _internal_var3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var3(const std::string& value);
  std::string* _internal_mutable_var3();
  public:

  // string var4 = 4;
  void clear_var4();
  const std::string& var4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var4();
  PROTOBUF_NODISCARD std::string* release_var4();
  void set_allocated_var4(std::string* var4);
  private:
  const std::string& _internal_var4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var4(const std::string& value);
  std::string* _internal_mutable_var4();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.FourVarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// -------------------------------------------------------------------

class FourVarReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDNSYSpkg.FourVarReply) */ {
 public:
  inline FourVarReply() : FourVarReply(nullptr) {}
  ~FourVarReply() override;
  explicit constexpr FourVarReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FourVarReply(const FourVarReply& from);
  FourVarReply(FourVarReply&& from) noexcept
    : FourVarReply() {
    *this = ::std::move(from);
  }

  inline FourVarReply& operator=(const FourVarReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FourVarReply& operator=(FourVarReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FourVarReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FourVarReply* internal_default_instance() {
    return reinterpret_cast<const FourVarReply*>(
               &_FourVarReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FourVarReply& a, FourVarReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FourVarReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FourVarReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FourVarReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FourVarReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FourVarReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FourVarReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FourVarReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDNSYSpkg.FourVarReply";
  }
  protected:
  explicit FourVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVar1FieldNumber = 1,
    kVar2FieldNumber = 2,
    kVar3FieldNumber = 3,
    kVar4FieldNumber = 4,
  };
  // string var1 = 1;
  void clear_var1();
  const std::string& var1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var1();
  PROTOBUF_NODISCARD std::string* release_var1();
  void set_allocated_var1(std::string* var1);
  private:
  const std::string& _internal_var1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var1(const std::string& value);
  std::string* _internal_mutable_var1();
  public:

  // string var2 = 2;
  void clear_var2();
  const std::string& var2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var2();
  PROTOBUF_NODISCARD std::string* release_var2();
  void set_allocated_var2(std::string* var2);
  private:
  const std::string& _internal_var2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var2(const std::string& value);
  std::string* _internal_mutable_var2();
  public:

  // string var3 = 3;
  void clear_var3();
  const std::string& var3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var3();
  PROTOBUF_NODISCARD std::string* release_var3();
  void set_allocated_var3(std::string* var3);
  private:
  const std::string& _internal_var3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var3(const std::string& value);
  std::string* _internal_mutable_var3();
  public:

  // string var4 = 4;
  void clear_var4();
  const std::string& var4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var4();
  PROTOBUF_NODISCARD std::string* release_var4();
  void set_allocated_var4(std::string* var4);
  private:
  const std::string& _internal_var4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var4(const std::string& value);
  std::string* _internal_mutable_var4();
  public:

  // @@protoc_insertion_point(class_scope:TDNSYSpkg.FourVarReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prototype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitalRequest

// string amount = 1;
inline void InitalRequest::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& InitalRequest::amount() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalRequest.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalRequest::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalRequest.amount)
}
inline std::string* InitalRequest::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalRequest.amount)
  return _s;
}
inline const std::string& InitalRequest::_internal_amount() const {
  return amount_.Get();
}
inline void InitalRequest::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalRequest::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalRequest::release_amount() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalRequest.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalRequest::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalRequest.amount)
}

// string pin = 2;
inline void InitalRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& InitalRequest::pin() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalRequest.pin)
}
inline std::string* InitalRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalRequest.pin)
  return _s;
}
inline const std::string& InitalRequest::_internal_pin() const {
  return pin_.Get();
}
inline void InitalRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalRequest::release_pin() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalRequest.pin)
  return pin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalRequest.pin)
}

// string cert = 3;
inline void InitalRequest::clear_cert() {
  cert_.ClearToEmpty();
}
inline const std::string& InitalRequest::cert() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalRequest.cert)
  return _internal_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalRequest::set_cert(ArgT0&& arg0, ArgT... args) {
 
 cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalRequest.cert)
}
inline std::string* InitalRequest::mutable_cert() {
  std::string* _s = _internal_mutable_cert();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalRequest.cert)
  return _s;
}
inline const std::string& InitalRequest::_internal_cert() const {
  return cert_.Get();
}
inline void InitalRequest::_internal_set_cert(const std::string& value) {
  
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalRequest::_internal_mutable_cert() {
  
  return cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalRequest::release_cert() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalRequest.cert)
  return cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalRequest::set_allocated_cert(std::string* cert) {
  if (cert != nullptr) {
    
  } else {
    
  }
  cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalRequest.cert)
}

// string note = 4;
inline void InitalRequest::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& InitalRequest::note() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalRequest.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalRequest::set_note(ArgT0&& arg0, ArgT... args) {
 
 note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalRequest.note)
}
inline std::string* InitalRequest::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalRequest.note)
  return _s;
}
inline const std::string& InitalRequest::_internal_note() const {
  return note_.Get();
}
inline void InitalRequest::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalRequest::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalRequest::release_note() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalRequest.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalRequest::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (note_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalRequest.note)
}

// -------------------------------------------------------------------

// InitalReplay

// string TDNsign = 1;
inline void InitalReplay::clear_tdnsign() {
  tdnsign_.ClearToEmpty();
}
inline const std::string& InitalReplay::tdnsign() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalReplay.TDNsign)
  return _internal_tdnsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalReplay::set_tdnsign(ArgT0&& arg0, ArgT... args) {
 
 tdnsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalReplay.TDNsign)
}
inline std::string* InitalReplay::mutable_tdnsign() {
  std::string* _s = _internal_mutable_tdnsign();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalReplay.TDNsign)
  return _s;
}
inline const std::string& InitalReplay::_internal_tdnsign() const {
  return tdnsign_.Get();
}
inline void InitalReplay::_internal_set_tdnsign(const std::string& value) {
  
  tdnsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalReplay::_internal_mutable_tdnsign() {
  
  return tdnsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalReplay::release_tdnsign() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalReplay.TDNsign)
  return tdnsign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalReplay::set_allocated_tdnsign(std::string* tdnsign) {
  if (tdnsign != nullptr) {
    
  } else {
    
  }
  tdnsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tdnsign,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tdnsign_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tdnsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalReplay.TDNsign)
}

// string ret = 2;
inline void InitalReplay::clear_ret() {
  ret_.ClearToEmpty();
}
inline const std::string& InitalReplay::ret() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.InitalReplay.ret)
  return _internal_ret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitalReplay::set_ret(ArgT0&& arg0, ArgT... args) {
 
 ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.InitalReplay.ret)
}
inline std::string* InitalReplay::mutable_ret() {
  std::string* _s = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.InitalReplay.ret)
  return _s;
}
inline const std::string& InitalReplay::_internal_ret() const {
  return ret_.Get();
}
inline void InitalReplay::_internal_set_ret(const std::string& value) {
  
  ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitalReplay::_internal_mutable_ret() {
  
  return ret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitalReplay::release_ret() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.InitalReplay.ret)
  return ret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitalReplay::set_allocated_ret(std::string* ret) {
  if (ret != nullptr) {
    
  } else {
    
  }
  ret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.InitalReplay.ret)
}

// -------------------------------------------------------------------

// OneVarRequest

// string var = 1;
inline void OneVarRequest::clear_var() {
  var_.ClearToEmpty();
}
inline const std::string& OneVarRequest::var() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.OneVarRequest.var)
  return _internal_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneVarRequest::set_var(ArgT0&& arg0, ArgT... args) {
 
 var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.OneVarRequest.var)
}
inline std::string* OneVarRequest::mutable_var() {
  std::string* _s = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.OneVarRequest.var)
  return _s;
}
inline const std::string& OneVarRequest::_internal_var() const {
  return var_.Get();
}
inline void OneVarRequest::_internal_set_var(const std::string& value) {
  
  var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OneVarRequest::_internal_mutable_var() {
  
  return var_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OneVarRequest::release_var() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.OneVarRequest.var)
  return var_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OneVarRequest::set_allocated_var(std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  var_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.OneVarRequest.var)
}

// -------------------------------------------------------------------

// OneVarReply

// string var = 1;
inline void OneVarReply::clear_var() {
  var_.ClearToEmpty();
}
inline const std::string& OneVarReply::var() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.OneVarReply.var)
  return _internal_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneVarReply::set_var(ArgT0&& arg0, ArgT... args) {
 
 var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.OneVarReply.var)
}
inline std::string* OneVarReply::mutable_var() {
  std::string* _s = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.OneVarReply.var)
  return _s;
}
inline const std::string& OneVarReply::_internal_var() const {
  return var_.Get();
}
inline void OneVarReply::_internal_set_var(const std::string& value) {
  
  var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OneVarReply::_internal_mutable_var() {
  
  return var_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OneVarReply::release_var() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.OneVarReply.var)
  return var_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OneVarReply::set_allocated_var(std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  var_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.OneVarReply.var)
}

// -------------------------------------------------------------------

// TwoVarRequest

// string var1 = 1;
inline void TwoVarRequest::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& TwoVarRequest::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.TwoVarRequest.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwoVarRequest::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.TwoVarRequest.var1)
}
inline std::string* TwoVarRequest::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.TwoVarRequest.var1)
  return _s;
}
inline const std::string& TwoVarRequest::_internal_var1() const {
  return var1_.Get();
}
inline void TwoVarRequest::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwoVarRequest::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwoVarRequest::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.TwoVarRequest.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwoVarRequest::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.TwoVarRequest.var1)
}

// string var2 = 2;
inline void TwoVarRequest::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& TwoVarRequest::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.TwoVarRequest.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwoVarRequest::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.TwoVarRequest.var2)
}
inline std::string* TwoVarRequest::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.TwoVarRequest.var2)
  return _s;
}
inline const std::string& TwoVarRequest::_internal_var2() const {
  return var2_.Get();
}
inline void TwoVarRequest::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwoVarRequest::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwoVarRequest::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.TwoVarRequest.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwoVarRequest::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.TwoVarRequest.var2)
}

// -------------------------------------------------------------------

// TwoVarReply

// string var1 = 1;
inline void TwoVarReply::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& TwoVarReply::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.TwoVarReply.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwoVarReply::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.TwoVarReply.var1)
}
inline std::string* TwoVarReply::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.TwoVarReply.var1)
  return _s;
}
inline const std::string& TwoVarReply::_internal_var1() const {
  return var1_.Get();
}
inline void TwoVarReply::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwoVarReply::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwoVarReply::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.TwoVarReply.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwoVarReply::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.TwoVarReply.var1)
}

// string var2 = 2;
inline void TwoVarReply::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& TwoVarReply::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.TwoVarReply.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwoVarReply::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.TwoVarReply.var2)
}
inline std::string* TwoVarReply::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.TwoVarReply.var2)
  return _s;
}
inline const std::string& TwoVarReply::_internal_var2() const {
  return var2_.Get();
}
inline void TwoVarReply::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwoVarReply::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwoVarReply::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.TwoVarReply.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwoVarReply::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.TwoVarReply.var2)
}

// -------------------------------------------------------------------

// ThreeVarRequest

// string var1 = 1;
inline void ThreeVarRequest::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& ThreeVarRequest::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarRequest.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarRequest::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarRequest.var1)
}
inline std::string* ThreeVarRequest::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarRequest.var1)
  return _s;
}
inline const std::string& ThreeVarRequest::_internal_var1() const {
  return var1_.Get();
}
inline void ThreeVarRequest::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarRequest.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarRequest::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarRequest.var1)
}

// string var2 = 2;
inline void ThreeVarRequest::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& ThreeVarRequest::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarRequest.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarRequest::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarRequest.var2)
}
inline std::string* ThreeVarRequest::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarRequest.var2)
  return _s;
}
inline const std::string& ThreeVarRequest::_internal_var2() const {
  return var2_.Get();
}
inline void ThreeVarRequest::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarRequest.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarRequest::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarRequest.var2)
}

// string var3 = 3;
inline void ThreeVarRequest::clear_var3() {
  var3_.ClearToEmpty();
}
inline const std::string& ThreeVarRequest::var3() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarRequest.var3)
  return _internal_var3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarRequest::set_var3(ArgT0&& arg0, ArgT... args) {
 
 var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarRequest.var3)
}
inline std::string* ThreeVarRequest::mutable_var3() {
  std::string* _s = _internal_mutable_var3();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarRequest.var3)
  return _s;
}
inline const std::string& ThreeVarRequest::_internal_var3() const {
  return var3_.Get();
}
inline void ThreeVarRequest::_internal_set_var3(const std::string& value) {
  
  var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::_internal_mutable_var3() {
  
  return var3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarRequest::release_var3() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarRequest.var3)
  return var3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarRequest::set_allocated_var3(std::string* var3) {
  if (var3 != nullptr) {
    
  } else {
    
  }
  var3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarRequest.var3)
}

// -------------------------------------------------------------------

// ThreeVarReply

// string var1 = 1;
inline void ThreeVarReply::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& ThreeVarReply::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarReply.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarReply::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarReply.var1)
}
inline std::string* ThreeVarReply::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarReply.var1)
  return _s;
}
inline const std::string& ThreeVarReply::_internal_var1() const {
  return var1_.Get();
}
inline void ThreeVarReply::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarReply.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarReply::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarReply.var1)
}

// string var2 = 2;
inline void ThreeVarReply::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& ThreeVarReply::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarReply.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarReply::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarReply.var2)
}
inline std::string* ThreeVarReply::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarReply.var2)
  return _s;
}
inline const std::string& ThreeVarReply::_internal_var2() const {
  return var2_.Get();
}
inline void ThreeVarReply::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarReply.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarReply::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarReply.var2)
}

// string var3 = 3;
inline void ThreeVarReply::clear_var3() {
  var3_.ClearToEmpty();
}
inline const std::string& ThreeVarReply::var3() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.ThreeVarReply.var3)
  return _internal_var3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreeVarReply::set_var3(ArgT0&& arg0, ArgT... args) {
 
 var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.ThreeVarReply.var3)
}
inline std::string* ThreeVarReply::mutable_var3() {
  std::string* _s = _internal_mutable_var3();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.ThreeVarReply.var3)
  return _s;
}
inline const std::string& ThreeVarReply::_internal_var3() const {
  return var3_.Get();
}
inline void ThreeVarReply::_internal_set_var3(const std::string& value) {
  
  var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::_internal_mutable_var3() {
  
  return var3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreeVarReply::release_var3() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.ThreeVarReply.var3)
  return var3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThreeVarReply::set_allocated_var3(std::string* var3) {
  if (var3 != nullptr) {
    
  } else {
    
  }
  var3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.ThreeVarReply.var3)
}

// -------------------------------------------------------------------

// FourVarRequest

// string var1 = 1;
inline void FourVarRequest::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& FourVarRequest::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarRequest.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarRequest::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarRequest.var1)
}
inline std::string* FourVarRequest::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarRequest.var1)
  return _s;
}
inline const std::string& FourVarRequest::_internal_var1() const {
  return var1_.Get();
}
inline void FourVarRequest::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarRequest::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarRequest::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarRequest.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarRequest::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarRequest.var1)
}

// string var2 = 2;
inline void FourVarRequest::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& FourVarRequest::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarRequest.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarRequest::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarRequest.var2)
}
inline std::string* FourVarRequest::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarRequest.var2)
  return _s;
}
inline const std::string& FourVarRequest::_internal_var2() const {
  return var2_.Get();
}
inline void FourVarRequest::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarRequest::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarRequest::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarRequest.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarRequest::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarRequest.var2)
}

// string var3 = 3;
inline void FourVarRequest::clear_var3() {
  var3_.ClearToEmpty();
}
inline const std::string& FourVarRequest::var3() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarRequest.var3)
  return _internal_var3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarRequest::set_var3(ArgT0&& arg0, ArgT... args) {
 
 var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarRequest.var3)
}
inline std::string* FourVarRequest::mutable_var3() {
  std::string* _s = _internal_mutable_var3();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarRequest.var3)
  return _s;
}
inline const std::string& FourVarRequest::_internal_var3() const {
  return var3_.Get();
}
inline void FourVarRequest::_internal_set_var3(const std::string& value) {
  
  var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarRequest::_internal_mutable_var3() {
  
  return var3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarRequest::release_var3() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarRequest.var3)
  return var3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarRequest::set_allocated_var3(std::string* var3) {
  if (var3 != nullptr) {
    
  } else {
    
  }
  var3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarRequest.var3)
}

// string var4 = 4;
inline void FourVarRequest::clear_var4() {
  var4_.ClearToEmpty();
}
inline const std::string& FourVarRequest::var4() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarRequest.var4)
  return _internal_var4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarRequest::set_var4(ArgT0&& arg0, ArgT... args) {
 
 var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarRequest.var4)
}
inline std::string* FourVarRequest::mutable_var4() {
  std::string* _s = _internal_mutable_var4();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarRequest.var4)
  return _s;
}
inline const std::string& FourVarRequest::_internal_var4() const {
  return var4_.Get();
}
inline void FourVarRequest::_internal_set_var4(const std::string& value) {
  
  var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarRequest::_internal_mutable_var4() {
  
  return var4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarRequest::release_var4() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarRequest.var4)
  return var4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarRequest::set_allocated_var4(std::string* var4) {
  if (var4 != nullptr) {
    
  } else {
    
  }
  var4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarRequest.var4)
}

// -------------------------------------------------------------------

// FourVarReply

// string var1 = 1;
inline void FourVarReply::clear_var1() {
  var1_.ClearToEmpty();
}
inline const std::string& FourVarReply::var1() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarReply.var1)
  return _internal_var1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarReply::set_var1(ArgT0&& arg0, ArgT... args) {
 
 var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarReply.var1)
}
inline std::string* FourVarReply::mutable_var1() {
  std::string* _s = _internal_mutable_var1();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarReply.var1)
  return _s;
}
inline const std::string& FourVarReply::_internal_var1() const {
  return var1_.Get();
}
inline void FourVarReply::_internal_set_var1(const std::string& value) {
  
  var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarReply::_internal_mutable_var1() {
  
  return var1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarReply::release_var1() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarReply.var1)
  return var1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarReply::set_allocated_var1(std::string* var1) {
  if (var1 != nullptr) {
    
  } else {
    
  }
  var1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarReply.var1)
}

// string var2 = 2;
inline void FourVarReply::clear_var2() {
  var2_.ClearToEmpty();
}
inline const std::string& FourVarReply::var2() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarReply.var2)
  return _internal_var2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarReply::set_var2(ArgT0&& arg0, ArgT... args) {
 
 var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarReply.var2)
}
inline std::string* FourVarReply::mutable_var2() {
  std::string* _s = _internal_mutable_var2();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarReply.var2)
  return _s;
}
inline const std::string& FourVarReply::_internal_var2() const {
  return var2_.Get();
}
inline void FourVarReply::_internal_set_var2(const std::string& value) {
  
  var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarReply::_internal_mutable_var2() {
  
  return var2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarReply::release_var2() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarReply.var2)
  return var2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarReply::set_allocated_var2(std::string* var2) {
  if (var2 != nullptr) {
    
  } else {
    
  }
  var2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarReply.var2)
}

// string var3 = 3;
inline void FourVarReply::clear_var3() {
  var3_.ClearToEmpty();
}
inline const std::string& FourVarReply::var3() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarReply.var3)
  return _internal_var3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarReply::set_var3(ArgT0&& arg0, ArgT... args) {
 
 var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarReply.var3)
}
inline std::string* FourVarReply::mutable_var3() {
  std::string* _s = _internal_mutable_var3();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarReply.var3)
  return _s;
}
inline const std::string& FourVarReply::_internal_var3() const {
  return var3_.Get();
}
inline void FourVarReply::_internal_set_var3(const std::string& value) {
  
  var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarReply::_internal_mutable_var3() {
  
  return var3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarReply::release_var3() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarReply.var3)
  return var3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarReply::set_allocated_var3(std::string* var3) {
  if (var3 != nullptr) {
    
  } else {
    
  }
  var3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarReply.var3)
}

// string var4 = 4;
inline void FourVarReply::clear_var4() {
  var4_.ClearToEmpty();
}
inline const std::string& FourVarReply::var4() const {
  // @@protoc_insertion_point(field_get:TDNSYSpkg.FourVarReply.var4)
  return _internal_var4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FourVarReply::set_var4(ArgT0&& arg0, ArgT... args) {
 
 var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TDNSYSpkg.FourVarReply.var4)
}
inline std::string* FourVarReply::mutable_var4() {
  std::string* _s = _internal_mutable_var4();
  // @@protoc_insertion_point(field_mutable:TDNSYSpkg.FourVarReply.var4)
  return _s;
}
inline const std::string& FourVarReply::_internal_var4() const {
  return var4_.Get();
}
inline void FourVarReply::_internal_set_var4(const std::string& value) {
  
  var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FourVarReply::_internal_mutable_var4() {
  
  return var4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FourVarReply::release_var4() {
  // @@protoc_insertion_point(field_release:TDNSYSpkg.FourVarReply.var4)
  return var4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FourVarReply::set_allocated_var4(std::string* var4) {
  if (var4 != nullptr) {
    
  } else {
    
  }
  var4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TDNSYSpkg.FourVarReply.var4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TDNSYSpkg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prototype_2eproto
