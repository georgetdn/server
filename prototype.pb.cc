// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prototype.proto

#include "prototype.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TDNSYSpkg {
constexpr InitalRequest::InitalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitalRequestDefaultTypeInternal {
  constexpr InitalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitalRequestDefaultTypeInternal() {}
  union {
    InitalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitalRequestDefaultTypeInternal _InitalRequest_default_instance_;
constexpr InitalReplay::InitalReplay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tdnsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitalReplayDefaultTypeInternal {
  constexpr InitalReplayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitalReplayDefaultTypeInternal() {}
  union {
    InitalReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitalReplayDefaultTypeInternal _InitalReplay_default_instance_;
constexpr OneVarRequest::OneVarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OneVarRequestDefaultTypeInternal {
  constexpr OneVarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OneVarRequestDefaultTypeInternal() {}
  union {
    OneVarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OneVarRequestDefaultTypeInternal _OneVarRequest_default_instance_;
constexpr OneVarReply::OneVarReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OneVarReplyDefaultTypeInternal {
  constexpr OneVarReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OneVarReplyDefaultTypeInternal() {}
  union {
    OneVarReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OneVarReplyDefaultTypeInternal _OneVarReply_default_instance_;
constexpr TwoVarRequest::TwoVarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TwoVarRequestDefaultTypeInternal {
  constexpr TwoVarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TwoVarRequestDefaultTypeInternal() {}
  union {
    TwoVarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TwoVarRequestDefaultTypeInternal _TwoVarRequest_default_instance_;
constexpr TwoVarReply::TwoVarReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TwoVarReplyDefaultTypeInternal {
  constexpr TwoVarReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TwoVarReplyDefaultTypeInternal() {}
  union {
    TwoVarReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TwoVarReplyDefaultTypeInternal _TwoVarReply_default_instance_;
constexpr ThreeVarRequest::ThreeVarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ThreeVarRequestDefaultTypeInternal {
  constexpr ThreeVarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThreeVarRequestDefaultTypeInternal() {}
  union {
    ThreeVarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThreeVarRequestDefaultTypeInternal _ThreeVarRequest_default_instance_;
constexpr ThreeVarReply::ThreeVarReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ThreeVarReplyDefaultTypeInternal {
  constexpr ThreeVarReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThreeVarReplyDefaultTypeInternal() {}
  union {
    ThreeVarReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThreeVarReplyDefaultTypeInternal _ThreeVarReply_default_instance_;
constexpr FourVarRequest::FourVarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FourVarRequestDefaultTypeInternal {
  constexpr FourVarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FourVarRequestDefaultTypeInternal() {}
  union {
    FourVarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FourVarRequestDefaultTypeInternal _FourVarRequest_default_instance_;
constexpr FourVarReply::FourVarReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FourVarReplyDefaultTypeInternal {
  constexpr FourVarReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FourVarReplyDefaultTypeInternal() {}
  union {
    FourVarReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FourVarReplyDefaultTypeInternal _FourVarReply_default_instance_;
}  // namespace TDNSYSpkg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prototype_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prototype_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prototype_2eproto = nullptr;

const uint32_t TableStruct_prototype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalRequest, pin_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalRequest, note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalReplay, tdnsign_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::InitalReplay, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::OneVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::OneVarRequest, var_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::OneVarReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::OneVarReply, var_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarRequest, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarRequest, var2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarReply, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::TwoVarReply, var2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarRequest, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarRequest, var2_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarRequest, var3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarReply, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarReply, var2_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::ThreeVarReply, var3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarRequest, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarRequest, var2_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarRequest, var3_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarRequest, var4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarReply, var1_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarReply, var2_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarReply, var3_),
  PROTOBUF_FIELD_OFFSET(::TDNSYSpkg::FourVarReply, var4_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TDNSYSpkg::InitalRequest)},
  { 10, -1, -1, sizeof(::TDNSYSpkg::InitalReplay)},
  { 18, -1, -1, sizeof(::TDNSYSpkg::OneVarRequest)},
  { 25, -1, -1, sizeof(::TDNSYSpkg::OneVarReply)},
  { 32, -1, -1, sizeof(::TDNSYSpkg::TwoVarRequest)},
  { 40, -1, -1, sizeof(::TDNSYSpkg::TwoVarReply)},
  { 48, -1, -1, sizeof(::TDNSYSpkg::ThreeVarRequest)},
  { 57, -1, -1, sizeof(::TDNSYSpkg::ThreeVarReply)},
  { 66, -1, -1, sizeof(::TDNSYSpkg::FourVarRequest)},
  { 76, -1, -1, sizeof(::TDNSYSpkg::FourVarReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_InitalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_InitalReplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_OneVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_OneVarReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_TwoVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_TwoVarReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_ThreeVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_ThreeVarReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_FourVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TDNSYSpkg::_FourVarReply_default_instance_),
};

const char descriptor_table_protodef_prototype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017prototype.proto\022\tTDNSYSpkg\"H\n\rInitalRe"
  "quest\022\016\n\006amount\030\001 \001(\t\022\013\n\003pin\030\002 \001(\t\022\014\n\004ce"
  "rt\030\003 \001(\t\022\014\n\004note\030\004 \001(\t\",\n\014InitalReplay\022\017"
  "\n\007TDNsign\030\001 \001(\t\022\013\n\003ret\030\002 \001(\t\"\034\n\rOneVarRe"
  "quest\022\013\n\003var\030\001 \001(\t\"\032\n\013OneVarReply\022\013\n\003var"
  "\030\001 \001(\t\"+\n\rTwoVarRequest\022\014\n\004var1\030\001 \001(\t\022\014\n"
  "\004var2\030\002 \001(\t\")\n\013TwoVarReply\022\014\n\004var1\030\001 \001(\t"
  "\022\014\n\004var2\030\002 \001(\t\";\n\017ThreeVarRequest\022\014\n\004var"
  "1\030\001 \001(\t\022\014\n\004var2\030\002 \001(\t\022\014\n\004var3\030\003 \001(\t\"9\n\rT"
  "hreeVarReply\022\014\n\004var1\030\001 \001(\t\022\014\n\004var2\030\002 \001(\t"
  "\022\014\n\004var3\030\003 \001(\t\"H\n\016FourVarRequest\022\014\n\004var1"
  "\030\001 \001(\t\022\014\n\004var2\030\002 \001(\t\022\014\n\004var3\030\003 \001(\t\022\014\n\004va"
  "r4\030\004 \001(\t\"F\n\014FourVarReply\022\014\n\004var1\030\001 \001(\t\022\014"
  "\n\004var2\030\002 \001(\t\022\014\n\004var3\030\003 \001(\t\022\014\n\004var4\030\004 \001(\t"
  "2\361\003\n\rTDNSYSservice\022C\n\014InitialIssue\022\030.TDN"
  "SYSpkg.InitalRequest\032\027.TDNSYSpkg.InitalR"
  "eplay\"\000\022A\n\013ValidateTDN\022\030.TDNSYSpkg.OneVa"
  "rRequest\032\026.TDNSYSpkg.TwoVarReply\"\000\022\?\n\tRe"
  "deemTDN\022\030.TDNSYSpkg.OneVarRequest\032\026.TDNS"
  "YSpkg.OneVarReply\"\000\022A\n\010SplitTDN\022\032.TDNSYS"
  "pkg.ThreeVarRequest\032\027.TDNSYSpkg.FourVarR"
  "eply\"\000\022G\n\016ConsolidateTDN\022\031.TDNSYSpkg.Fou"
  "rVarRequest\032\030.TDNSYSpkg.ThreeVarReply\"\000\022"
  "H\n\022ReqestTDNOwnership\022\030.TDNSYSpkg.TwoVar"
  "Request\032\026.TDNSYSpkg.OneVarReply\"\000\022A\n\tSet"
  "TDNPin\022\032.TDNSYSpkg.ThreeVarRequest\032\026.TDN"
  "SYSpkg.OneVarReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prototype_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prototype_2eproto = {
  false, false, 1068, descriptor_table_protodef_prototype_2eproto, "prototype.proto", 
  &descriptor_table_prototype_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_prototype_2eproto::offsets,
  file_level_metadata_prototype_2eproto, file_level_enum_descriptors_prototype_2eproto, file_level_service_descriptors_prototype_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_prototype_2eproto_getter() {
  return &descriptor_table_prototype_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prototype_2eproto(&descriptor_table_prototype_2eproto);
namespace TDNSYSpkg {

// ===================================================================

class InitalRequest::_Internal {
 public:
};

InitalRequest::InitalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.InitalRequest)
}
InitalRequest::InitalRequest(const InitalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pin().empty()) {
    pin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pin(), 
      GetArenaForAllocation());
  }
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cert().empty()) {
    cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert(), 
      GetArenaForAllocation());
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note().empty()) {
    note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_note(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.InitalRequest)
}

inline void InitalRequest::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitalRequest::~InitalRequest() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.InitalRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitalRequest::ArenaDtor(void* object) {
  InitalRequest* _this = reinterpret_cast< InitalRequest* >(object);
  (void)_this;
}
void InitalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.InitalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  pin_.ClearToEmpty();
  cert_.ClearToEmpty();
  note_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalRequest.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalRequest.pin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalRequest.cert"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string note = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalRequest.note"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.InitalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string amount = 1;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalRequest.amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalRequest.pin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pin(), target);
  }

  // string cert = 3;
  if (!this->_internal_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cert().data(), static_cast<int>(this->_internal_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalRequest.cert");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cert(), target);
  }

  // string note = 4;
  if (!this->_internal_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalRequest.note");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.InitalRequest)
  return target;
}

size_t InitalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.InitalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 1;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  // string cert = 3;
  if (!this->_internal_cert().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cert());
  }

  // string note = 4;
  if (!this->_internal_note().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitalRequest::GetClassData() const { return &_class_data_; }

void InitalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitalRequest *>(to)->MergeFrom(
      static_cast<const InitalRequest &>(from));
}


void InitalRequest::MergeFrom(const InitalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.InitalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_pin().empty()) {
    _internal_set_pin(from._internal_pin());
  }
  if (!from._internal_cert().empty()) {
    _internal_set_cert(from._internal_cert());
  }
  if (!from._internal_note().empty()) {
    _internal_set_note(from._internal_note());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitalRequest::CopyFrom(const InitalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.InitalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitalRequest::IsInitialized() const {
  return true;
}

void InitalRequest::InternalSwap(InitalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pin_, lhs_arena,
      &other->pin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cert_, lhs_arena,
      &other->cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &note_, lhs_arena,
      &other->note_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitalRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[0]);
}

// ===================================================================

class InitalReplay::_Internal {
 public:
};

InitalReplay::InitalReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.InitalReplay)
}
InitalReplay::InitalReplay(const InitalReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tdnsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tdnsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tdnsign().empty()) {
    tdnsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tdnsign(), 
      GetArenaForAllocation());
  }
  ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ret().empty()) {
    ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.InitalReplay)
}

inline void InitalReplay::SharedCtor() {
tdnsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tdnsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitalReplay::~InitalReplay() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.InitalReplay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitalReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tdnsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitalReplay::ArenaDtor(void* object) {
  InitalReplay* _this = reinterpret_cast< InitalReplay* >(object);
  (void)_this;
}
void InitalReplay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitalReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitalReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.InitalReplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tdnsign_.ClearToEmpty();
  ret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitalReplay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TDNsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tdnsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalReplay.TDNsign"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.InitalReplay.ret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitalReplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.InitalReplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string TDNsign = 1;
  if (!this->_internal_tdnsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tdnsign().data(), static_cast<int>(this->_internal_tdnsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalReplay.TDNsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tdnsign(), target);
  }

  // string ret = 2;
  if (!this->_internal_ret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret().data(), static_cast<int>(this->_internal_ret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.InitalReplay.ret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.InitalReplay)
  return target;
}

size_t InitalReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.InitalReplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TDNsign = 1;
  if (!this->_internal_tdnsign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tdnsign());
  }

  // string ret = 2;
  if (!this->_internal_ret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitalReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitalReplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitalReplay::GetClassData() const { return &_class_data_; }

void InitalReplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitalReplay *>(to)->MergeFrom(
      static_cast<const InitalReplay &>(from));
}


void InitalReplay::MergeFrom(const InitalReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.InitalReplay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tdnsign().empty()) {
    _internal_set_tdnsign(from._internal_tdnsign());
  }
  if (!from._internal_ret().empty()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitalReplay::CopyFrom(const InitalReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.InitalReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitalReplay::IsInitialized() const {
  return true;
}

void InitalReplay::InternalSwap(InitalReplay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tdnsign_, lhs_arena,
      &other->tdnsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ret_, lhs_arena,
      &other->ret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitalReplay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[1]);
}

// ===================================================================

class OneVarRequest::_Internal {
 public:
};

OneVarRequest::OneVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.OneVarRequest)
}
OneVarRequest::OneVarRequest(const OneVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var().empty()) {
    var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.OneVarRequest)
}

inline void OneVarRequest::SharedCtor() {
var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneVarRequest::~OneVarRequest() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.OneVarRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OneVarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneVarRequest::ArenaDtor(void* object) {
  OneVarRequest* _this = reinterpret_cast< OneVarRequest* >(object);
  (void)_this;
}
void OneVarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.OneVarRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.OneVarRequest.var"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneVarRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.OneVarRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (!this->_internal_var().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var().data(), static_cast<int>(this->_internal_var().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.OneVarRequest.var");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.OneVarRequest)
  return target;
}

size_t OneVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.OneVarRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var = 1;
  if (!this->_internal_var().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneVarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneVarRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneVarRequest::GetClassData() const { return &_class_data_; }

void OneVarRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneVarRequest *>(to)->MergeFrom(
      static_cast<const OneVarRequest &>(from));
}


void OneVarRequest::MergeFrom(const OneVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.OneVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var().empty()) {
    _internal_set_var(from._internal_var());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneVarRequest::CopyFrom(const OneVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.OneVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVarRequest::IsInitialized() const {
  return true;
}

void OneVarRequest::InternalSwap(OneVarRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var_, lhs_arena,
      &other->var_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OneVarRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[2]);
}

// ===================================================================

class OneVarReply::_Internal {
 public:
};

OneVarReply::OneVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.OneVarReply)
}
OneVarReply::OneVarReply(const OneVarReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var().empty()) {
    var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.OneVarReply)
}

inline void OneVarReply::SharedCtor() {
var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneVarReply::~OneVarReply() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.OneVarReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OneVarReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneVarReply::ArenaDtor(void* object) {
  OneVarReply* _this = reinterpret_cast< OneVarReply* >(object);
  (void)_this;
}
void OneVarReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneVarReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneVarReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.OneVarReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneVarReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.OneVarReply.var"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneVarReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.OneVarReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (!this->_internal_var().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var().data(), static_cast<int>(this->_internal_var().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.OneVarReply.var");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.OneVarReply)
  return target;
}

size_t OneVarReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.OneVarReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var = 1;
  if (!this->_internal_var().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneVarReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneVarReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneVarReply::GetClassData() const { return &_class_data_; }

void OneVarReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneVarReply *>(to)->MergeFrom(
      static_cast<const OneVarReply &>(from));
}


void OneVarReply::MergeFrom(const OneVarReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.OneVarReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var().empty()) {
    _internal_set_var(from._internal_var());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneVarReply::CopyFrom(const OneVarReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.OneVarReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVarReply::IsInitialized() const {
  return true;
}

void OneVarReply::InternalSwap(OneVarReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var_, lhs_arena,
      &other->var_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OneVarReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[3]);
}

// ===================================================================

class TwoVarRequest::_Internal {
 public:
};

TwoVarRequest::TwoVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.TwoVarRequest)
}
TwoVarRequest::TwoVarRequest(const TwoVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.TwoVarRequest)
}

inline void TwoVarRequest::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwoVarRequest::~TwoVarRequest() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.TwoVarRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TwoVarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TwoVarRequest::ArenaDtor(void* object) {
  TwoVarRequest* _this = reinterpret_cast< TwoVarRequest* >(object);
  (void)_this;
}
void TwoVarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwoVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TwoVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.TwoVarRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwoVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.TwoVarRequest.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.TwoVarRequest.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwoVarRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.TwoVarRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.TwoVarRequest.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.TwoVarRequest.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.TwoVarRequest)
  return target;
}

size_t TwoVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.TwoVarRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwoVarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TwoVarRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwoVarRequest::GetClassData() const { return &_class_data_; }

void TwoVarRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TwoVarRequest *>(to)->MergeFrom(
      static_cast<const TwoVarRequest &>(from));
}


void TwoVarRequest::MergeFrom(const TwoVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.TwoVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwoVarRequest::CopyFrom(const TwoVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.TwoVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoVarRequest::IsInitialized() const {
  return true;
}

void TwoVarRequest::InternalSwap(TwoVarRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoVarRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[4]);
}

// ===================================================================

class TwoVarReply::_Internal {
 public:
};

TwoVarReply::TwoVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.TwoVarReply)
}
TwoVarReply::TwoVarReply(const TwoVarReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.TwoVarReply)
}

inline void TwoVarReply::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwoVarReply::~TwoVarReply() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.TwoVarReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TwoVarReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TwoVarReply::ArenaDtor(void* object) {
  TwoVarReply* _this = reinterpret_cast< TwoVarReply* >(object);
  (void)_this;
}
void TwoVarReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwoVarReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TwoVarReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.TwoVarReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwoVarReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.TwoVarReply.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.TwoVarReply.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwoVarReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.TwoVarReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.TwoVarReply.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.TwoVarReply.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.TwoVarReply)
  return target;
}

size_t TwoVarReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.TwoVarReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwoVarReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TwoVarReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwoVarReply::GetClassData() const { return &_class_data_; }

void TwoVarReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TwoVarReply *>(to)->MergeFrom(
      static_cast<const TwoVarReply &>(from));
}


void TwoVarReply::MergeFrom(const TwoVarReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.TwoVarReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwoVarReply::CopyFrom(const TwoVarReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.TwoVarReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoVarReply::IsInitialized() const {
  return true;
}

void TwoVarReply::InternalSwap(TwoVarReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoVarReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[5]);
}

// ===================================================================

class ThreeVarRequest::_Internal {
 public:
};

ThreeVarRequest::ThreeVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.ThreeVarRequest)
}
ThreeVarRequest::ThreeVarRequest(const ThreeVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var3().empty()) {
    var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var3(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.ThreeVarRequest)
}

inline void ThreeVarRequest::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThreeVarRequest::~ThreeVarRequest() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.ThreeVarRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThreeVarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThreeVarRequest::ArenaDtor(void* object) {
  ThreeVarRequest* _this = reinterpret_cast< ThreeVarRequest* >(object);
  (void)_this;
}
void ThreeVarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreeVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreeVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.ThreeVarRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  var3_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreeVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarRequest.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarRequest.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_var3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarRequest.var3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreeVarRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.ThreeVarRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarRequest.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarRequest.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var3().data(), static_cast<int>(this->_internal_var3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarRequest.var3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.ThreeVarRequest)
  return target;
}

size_t ThreeVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.ThreeVarRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreeVarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThreeVarRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreeVarRequest::GetClassData() const { return &_class_data_; }

void ThreeVarRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThreeVarRequest *>(to)->MergeFrom(
      static_cast<const ThreeVarRequest &>(from));
}


void ThreeVarRequest::MergeFrom(const ThreeVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.ThreeVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  if (!from._internal_var3().empty()) {
    _internal_set_var3(from._internal_var3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreeVarRequest::CopyFrom(const ThreeVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.ThreeVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreeVarRequest::IsInitialized() const {
  return true;
}

void ThreeVarRequest::InternalSwap(ThreeVarRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var3_, lhs_arena,
      &other->var3_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreeVarRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[6]);
}

// ===================================================================

class ThreeVarReply::_Internal {
 public:
};

ThreeVarReply::ThreeVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.ThreeVarReply)
}
ThreeVarReply::ThreeVarReply(const ThreeVarReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var3().empty()) {
    var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var3(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.ThreeVarReply)
}

inline void ThreeVarReply::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThreeVarReply::~ThreeVarReply() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.ThreeVarReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThreeVarReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThreeVarReply::ArenaDtor(void* object) {
  ThreeVarReply* _this = reinterpret_cast< ThreeVarReply* >(object);
  (void)_this;
}
void ThreeVarReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreeVarReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreeVarReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.ThreeVarReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  var3_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreeVarReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarReply.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarReply.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_var3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.ThreeVarReply.var3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreeVarReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.ThreeVarReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarReply.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarReply.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var3().data(), static_cast<int>(this->_internal_var3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.ThreeVarReply.var3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.ThreeVarReply)
  return target;
}

size_t ThreeVarReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.ThreeVarReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreeVarReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThreeVarReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreeVarReply::GetClassData() const { return &_class_data_; }

void ThreeVarReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThreeVarReply *>(to)->MergeFrom(
      static_cast<const ThreeVarReply &>(from));
}


void ThreeVarReply::MergeFrom(const ThreeVarReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.ThreeVarReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  if (!from._internal_var3().empty()) {
    _internal_set_var3(from._internal_var3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreeVarReply::CopyFrom(const ThreeVarReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.ThreeVarReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreeVarReply::IsInitialized() const {
  return true;
}

void ThreeVarReply::InternalSwap(ThreeVarReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var3_, lhs_arena,
      &other->var3_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreeVarReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[7]);
}

// ===================================================================

class FourVarRequest::_Internal {
 public:
};

FourVarRequest::FourVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.FourVarRequest)
}
FourVarRequest::FourVarRequest(const FourVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var3().empty()) {
    var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var3(), 
      GetArenaForAllocation());
  }
  var4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var4().empty()) {
    var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var4(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.FourVarRequest)
}

inline void FourVarRequest::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FourVarRequest::~FourVarRequest() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.FourVarRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FourVarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FourVarRequest::ArenaDtor(void* object) {
  FourVarRequest* _this = reinterpret_cast< FourVarRequest* >(object);
  (void)_this;
}
void FourVarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FourVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FourVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.FourVarRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  var3_.ClearToEmpty();
  var4_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FourVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarRequest.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarRequest.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_var3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarRequest.var3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_var4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarRequest.var4"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FourVarRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.FourVarRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarRequest.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarRequest.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var3().data(), static_cast<int>(this->_internal_var3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarRequest.var3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var3(), target);
  }

  // string var4 = 4;
  if (!this->_internal_var4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var4().data(), static_cast<int>(this->_internal_var4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarRequest.var4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.FourVarRequest)
  return target;
}

size_t FourVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.FourVarRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var3());
  }

  // string var4 = 4;
  if (!this->_internal_var4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FourVarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FourVarRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FourVarRequest::GetClassData() const { return &_class_data_; }

void FourVarRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FourVarRequest *>(to)->MergeFrom(
      static_cast<const FourVarRequest &>(from));
}


void FourVarRequest::MergeFrom(const FourVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.FourVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  if (!from._internal_var3().empty()) {
    _internal_set_var3(from._internal_var3());
  }
  if (!from._internal_var4().empty()) {
    _internal_set_var4(from._internal_var4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FourVarRequest::CopyFrom(const FourVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.FourVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourVarRequest::IsInitialized() const {
  return true;
}

void FourVarRequest::InternalSwap(FourVarRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var3_, lhs_arena,
      &other->var3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var4_, lhs_arena,
      &other->var4_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FourVarRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[8]);
}

// ===================================================================

class FourVarReply::_Internal {
 public:
};

FourVarReply::FourVarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TDNSYSpkg.FourVarReply)
}
FourVarReply::FourVarReply(const FourVarReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var1().empty()) {
    var1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var1(), 
      GetArenaForAllocation());
  }
  var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var2().empty()) {
    var2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var2(), 
      GetArenaForAllocation());
  }
  var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var3().empty()) {
    var3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var3(), 
      GetArenaForAllocation());
  }
  var4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var4().empty()) {
    var4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var4(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TDNSYSpkg.FourVarReply)
}

inline void FourVarReply::SharedCtor() {
var1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FourVarReply::~FourVarReply() {
  // @@protoc_insertion_point(destructor:TDNSYSpkg.FourVarReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FourVarReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FourVarReply::ArenaDtor(void* object) {
  FourVarReply* _this = reinterpret_cast< FourVarReply* >(object);
  (void)_this;
}
void FourVarReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FourVarReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FourVarReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TDNSYSpkg.FourVarReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var1_.ClearToEmpty();
  var2_.ClearToEmpty();
  var3_.ClearToEmpty();
  var4_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FourVarReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarReply.var1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarReply.var2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_var3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarReply.var3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_var4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDNSYSpkg.FourVarReply.var4"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FourVarReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDNSYSpkg.FourVarReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var1().data(), static_cast<int>(this->_internal_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarReply.var1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var1(), target);
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var2().data(), static_cast<int>(this->_internal_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarReply.var2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var2(), target);
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var3().data(), static_cast<int>(this->_internal_var3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarReply.var3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var3(), target);
  }

  // string var4 = 4;
  if (!this->_internal_var4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var4().data(), static_cast<int>(this->_internal_var4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDNSYSpkg.FourVarReply.var4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDNSYSpkg.FourVarReply)
  return target;
}

size_t FourVarReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDNSYSpkg.FourVarReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var1 = 1;
  if (!this->_internal_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var1());
  }

  // string var2 = 2;
  if (!this->_internal_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var2());
  }

  // string var3 = 3;
  if (!this->_internal_var3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var3());
  }

  // string var4 = 4;
  if (!this->_internal_var4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FourVarReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FourVarReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FourVarReply::GetClassData() const { return &_class_data_; }

void FourVarReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FourVarReply *>(to)->MergeFrom(
      static_cast<const FourVarReply &>(from));
}


void FourVarReply::MergeFrom(const FourVarReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDNSYSpkg.FourVarReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var1().empty()) {
    _internal_set_var1(from._internal_var1());
  }
  if (!from._internal_var2().empty()) {
    _internal_set_var2(from._internal_var2());
  }
  if (!from._internal_var3().empty()) {
    _internal_set_var3(from._internal_var3());
  }
  if (!from._internal_var4().empty()) {
    _internal_set_var4(from._internal_var4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FourVarReply::CopyFrom(const FourVarReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDNSYSpkg.FourVarReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourVarReply::IsInitialized() const {
  return true;
}

void FourVarReply::InternalSwap(FourVarReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var1_, lhs_arena,
      &other->var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var2_, lhs_arena,
      &other->var2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var3_, lhs_arena,
      &other->var3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var4_, lhs_arena,
      &other->var4_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FourVarReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_prototype_2eproto_getter, &descriptor_table_prototype_2eproto_once,
      file_level_metadata_prototype_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TDNSYSpkg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::InitalRequest* Arena::CreateMaybeMessage< ::TDNSYSpkg::InitalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::InitalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::InitalReplay* Arena::CreateMaybeMessage< ::TDNSYSpkg::InitalReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::InitalReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::OneVarRequest* Arena::CreateMaybeMessage< ::TDNSYSpkg::OneVarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::OneVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::OneVarReply* Arena::CreateMaybeMessage< ::TDNSYSpkg::OneVarReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::OneVarReply >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::TwoVarRequest* Arena::CreateMaybeMessage< ::TDNSYSpkg::TwoVarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::TwoVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::TwoVarReply* Arena::CreateMaybeMessage< ::TDNSYSpkg::TwoVarReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::TwoVarReply >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::ThreeVarRequest* Arena::CreateMaybeMessage< ::TDNSYSpkg::ThreeVarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::ThreeVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::ThreeVarReply* Arena::CreateMaybeMessage< ::TDNSYSpkg::ThreeVarReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::ThreeVarReply >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::FourVarRequest* Arena::CreateMaybeMessage< ::TDNSYSpkg::FourVarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::FourVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TDNSYSpkg::FourVarReply* Arena::CreateMaybeMessage< ::TDNSYSpkg::FourVarReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDNSYSpkg::FourVarReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
