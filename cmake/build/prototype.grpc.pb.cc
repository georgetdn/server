// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: prototype.proto

#include "prototype.pb.h"
#include "prototype.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TDNSYSpkg {

static const char* TDNSYSservice_method_names[] = {
  "/TDNSYSpkg.TDNSYSservice/InitialIssue",
  "/TDNSYSpkg.TDNSYSservice/ValidateTDN",
  "/TDNSYSpkg.TDNSYSservice/RedeemTDN",
  "/TDNSYSpkg.TDNSYSservice/SplitTDN",
  "/TDNSYSpkg.TDNSYSservice/ConsolidateTDN",
  "/TDNSYSpkg.TDNSYSservice/ReqestTDNOwnership",
  "/TDNSYSpkg.TDNSYSservice/SetTDNPin",
};

std::unique_ptr< TDNSYSservice::Stub> TDNSYSservice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TDNSYSservice::Stub> stub(new TDNSYSservice::Stub(channel, options));
  return stub;
}

TDNSYSservice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitialIssue_(TDNSYSservice_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateTDN_(TDNSYSservice_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RedeemTDN_(TDNSYSservice_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SplitTDN_(TDNSYSservice_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsolidateTDN_(TDNSYSservice_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReqestTDNOwnership_(TDNSYSservice_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTDNPin_(TDNSYSservice_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TDNSYSservice::Stub::InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::TDNSYSpkg::InitalReplay* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitialIssue_, context, request, response);
}

void TDNSYSservice::Stub::async::InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitialIssue_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitialIssue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>* TDNSYSservice::Stub::PrepareAsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::InitalReplay, ::TDNSYSpkg::InitalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitialIssue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>* TDNSYSservice::Stub::AsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitialIssueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::TwoVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateTDN_, context, request, response);
}

void TDNSYSservice::Stub::async::ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateTDN_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateTDN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>* TDNSYSservice::Stub::PrepareAsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::TwoVarReply, ::TDNSYSpkg::OneVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateTDN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>* TDNSYSservice::Stub::AsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateTDNRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::OneVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RedeemTDN_, context, request, response);
}

void TDNSYSservice::Stub::async::RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RedeemTDN_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RedeemTDN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::PrepareAsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::OneVarReply, ::TDNSYSpkg::OneVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RedeemTDN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::AsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRedeemTDNRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::FourVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SplitTDN_, context, request, response);
}

void TDNSYSservice::Stub::async::SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SplitTDN_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SplitTDN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>* TDNSYSservice::Stub::PrepareAsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::FourVarReply, ::TDNSYSpkg::ThreeVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SplitTDN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>* TDNSYSservice::Stub::AsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSplitTDNRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::TDNSYSpkg::ThreeVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsolidateTDN_, context, request, response);
}

void TDNSYSservice::Stub::async::ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsolidateTDN_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsolidateTDN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>* TDNSYSservice::Stub::PrepareAsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::ThreeVarReply, ::TDNSYSpkg::FourVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsolidateTDN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>* TDNSYSservice::Stub::AsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsolidateTDNRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::TDNSYSpkg::OneVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReqestTDNOwnership_, context, request, response);
}

void TDNSYSservice::Stub::async::ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReqestTDNOwnership_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReqestTDNOwnership_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::PrepareAsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::OneVarReply, ::TDNSYSpkg::TwoVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReqestTDNOwnership_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::AsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReqestTDNOwnershipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TDNSYSservice::Stub::SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::OneVarReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTDNPin_, context, request, response);
}

void TDNSYSservice::Stub::async::SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTDNPin_, context, request, response, std::move(f));
}

void TDNSYSservice::Stub::async::SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTDNPin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::PrepareAsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TDNSYSpkg::OneVarReply, ::TDNSYSpkg::ThreeVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTDNPin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* TDNSYSservice::Stub::AsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTDNPinRaw(context, request, cq);
  result->StartCall();
  return result;
}

TDNSYSservice::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::InitalRequest* req,
             ::TDNSYSpkg::InitalReplay* resp) {
               return service->InitialIssue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::OneVarRequest* req,
             ::TDNSYSpkg::TwoVarReply* resp) {
               return service->ValidateTDN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::OneVarRequest* req,
             ::TDNSYSpkg::OneVarReply* resp) {
               return service->RedeemTDN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::ThreeVarRequest* req,
             ::TDNSYSpkg::FourVarReply* resp) {
               return service->SplitTDN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::FourVarRequest* req,
             ::TDNSYSpkg::ThreeVarReply* resp) {
               return service->ConsolidateTDN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::TwoVarRequest* req,
             ::TDNSYSpkg::OneVarReply* resp) {
               return service->ReqestTDNOwnership(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TDNSYSservice_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TDNSYSservice::Service, ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TDNSYSservice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TDNSYSpkg::ThreeVarRequest* req,
             ::TDNSYSpkg::OneVarReply* resp) {
               return service->SetTDNPin(ctx, req, resp);
             }, this)));
}

TDNSYSservice::Service::~Service() {
}

::grpc::Status TDNSYSservice::Service::InitialIssue(::grpc::ServerContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::ValidateTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::RedeemTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::SplitTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::ConsolidateTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::ReqestTDNOwnership(::grpc::ServerContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TDNSYSservice::Service::SetTDNPin(::grpc::ServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TDNSYSpkg

