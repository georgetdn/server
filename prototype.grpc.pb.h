// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: prototype.proto
// Original file comments:
// Copyright 2015 gRPC authors.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_prototype_2eproto__INCLUDED
#define GRPC_prototype_2eproto__INCLUDED

#include "prototype.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace TDNSYSpkg {

class TDNSYSservice final {
 public:
  static constexpr char const* service_full_name() {
    return "TDNSYSpkg.TDNSYSservice";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::TDNSYSpkg::InitalReplay* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>> AsyncInitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>>(AsyncInitialIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>> PrepareAsyncInitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>>(PrepareAsyncInitialIssueRaw(context, request, cq));
    }
    virtual ::grpc::Status ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::TwoVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>> AsyncValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>>(AsyncValidateTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>> PrepareAsyncValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>>(PrepareAsyncValidateTDNRaw(context, request, cq));
    }
    virtual ::grpc::Status RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::OneVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> AsyncRedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(AsyncRedeemTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> PrepareAsyncRedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncRedeemTDNRaw(context, request, cq));
    }
    virtual ::grpc::Status SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::FourVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>> AsyncSplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>>(AsyncSplitTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>> PrepareAsyncSplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>>(PrepareAsyncSplitTDNRaw(context, request, cq));
    }
    virtual ::grpc::Status ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::TDNSYSpkg::ThreeVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>> AsyncConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>>(AsyncConsolidateTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>> PrepareAsyncConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>>(PrepareAsyncConsolidateTDNRaw(context, request, cq));
    }
    virtual ::grpc::Status ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::TDNSYSpkg::OneVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> AsyncReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(AsyncReqestTDNOwnershipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> PrepareAsyncReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncReqestTDNOwnershipRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::OneVarReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> AsyncSetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(AsyncSetTDNPinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>> PrepareAsyncSetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncSetTDNPinRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>* AsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::InitalReplay>* PrepareAsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>* AsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::TwoVarReply>* PrepareAsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* AsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* PrepareAsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>* AsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::FourVarReply>* PrepareAsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>* AsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::ThreeVarReply>* PrepareAsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* AsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* PrepareAsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* AsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TDNSYSpkg::OneVarReply>* PrepareAsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::TDNSYSpkg::InitalReplay* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>> AsyncInitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>>(AsyncInitialIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>> PrepareAsyncInitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>>(PrepareAsyncInitialIssueRaw(context, request, cq));
    }
    ::grpc::Status ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::TwoVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>> AsyncValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>>(AsyncValidateTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>> PrepareAsyncValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>>(PrepareAsyncValidateTDNRaw(context, request, cq));
    }
    ::grpc::Status RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::TDNSYSpkg::OneVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> AsyncRedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(AsyncRedeemTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> PrepareAsyncRedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncRedeemTDNRaw(context, request, cq));
    }
    ::grpc::Status SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::FourVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>> AsyncSplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>>(AsyncSplitTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>> PrepareAsyncSplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>>(PrepareAsyncSplitTDNRaw(context, request, cq));
    }
    ::grpc::Status ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::TDNSYSpkg::ThreeVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>> AsyncConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>>(AsyncConsolidateTDNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>> PrepareAsyncConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>>(PrepareAsyncConsolidateTDNRaw(context, request, cq));
    }
    ::grpc::Status ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::TDNSYSpkg::OneVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> AsyncReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(AsyncReqestTDNOwnershipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> PrepareAsyncReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncReqestTDNOwnershipRaw(context, request, cq));
    }
    ::grpc::Status SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::TDNSYSpkg::OneVarReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> AsyncSetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(AsyncSetTDNPinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>> PrepareAsyncSetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>>(PrepareAsyncSetTDNPinRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, std::function<void(::grpc::Status)>) override;
      void InitialIssue(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, std::function<void(::grpc::Status)>) override;
      void ValidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) override;
      void RedeemTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, std::function<void(::grpc::Status)>) override;
      void SplitTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, std::function<void(::grpc::Status)>) override;
      void ConsolidateTDN(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) override;
      void ReqestTDNOwnership(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, std::function<void(::grpc::Status)>) override;
      void SetTDNPin(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>* AsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::InitalReplay>* PrepareAsyncInitialIssueRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::InitalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>* AsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::TwoVarReply>* PrepareAsyncValidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* AsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* PrepareAsyncRedeemTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::OneVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>* AsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::FourVarReply>* PrepareAsyncSplitTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>* AsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::ThreeVarReply>* PrepareAsyncConsolidateTDNRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::FourVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* AsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* PrepareAsyncReqestTDNOwnershipRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::TwoVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* AsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TDNSYSpkg::OneVarReply>* PrepareAsyncSetTDNPinRaw(::grpc::ClientContext* context, const ::TDNSYSpkg::ThreeVarRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitialIssue_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateTDN_;
    const ::grpc::internal::RpcMethod rpcmethod_RedeemTDN_;
    const ::grpc::internal::RpcMethod rpcmethod_SplitTDN_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsolidateTDN_;
    const ::grpc::internal::RpcMethod rpcmethod_ReqestTDNOwnership_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTDNPin_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InitialIssue(::grpc::ServerContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response);
    virtual ::grpc::Status ValidateTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response);
    virtual ::grpc::Status RedeemTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response);
    virtual ::grpc::Status SplitTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response);
    virtual ::grpc::Status ConsolidateTDN(::grpc::ServerContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response);
    virtual ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response);
    virtual ::grpc::Status SetTDNPin(::grpc::ServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitialIssue() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialIssue(::grpc::ServerContext* context, ::TDNSYSpkg::InitalRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::InitalReplay>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateTDN(::grpc::ServerContext* context, ::TDNSYSpkg::OneVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::TwoVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRedeemTDN(::grpc::ServerContext* context, ::TDNSYSpkg::OneVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::OneVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SplitTDN() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitTDN(::grpc::ServerContext* context, ::TDNSYSpkg::ThreeVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::FourVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsolidateTDN(::grpc::ServerContext* context, ::TDNSYSpkg::FourVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::ThreeVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReqestTDNOwnership(::grpc::ServerContext* context, ::TDNSYSpkg::TwoVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::OneVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTDNPin(::grpc::ServerContext* context, ::TDNSYSpkg::ThreeVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::TDNSYSpkg::OneVarReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitialIssue<WithAsyncMethod_ValidateTDN<WithAsyncMethod_RedeemTDN<WithAsyncMethod_SplitTDN<WithAsyncMethod_ConsolidateTDN<WithAsyncMethod_ReqestTDNOwnership<WithAsyncMethod_SetTDNPin<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitialIssue() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::InitalRequest* request, ::TDNSYSpkg::InitalReplay* response) { return this->InitialIssue(context, request, response); }));}
    void SetMessageAllocatorFor_InitialIssue(
        ::grpc::MessageAllocator< ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitialIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::TwoVarReply* response) { return this->ValidateTDN(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateTDN(
        ::grpc::MessageAllocator< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::OneVarRequest* request, ::TDNSYSpkg::OneVarReply* response) { return this->RedeemTDN(context, request, response); }));}
    void SetMessageAllocatorFor_RedeemTDN(
        ::grpc::MessageAllocator< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RedeemTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SplitTDN() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::FourVarReply* response) { return this->SplitTDN(context, request, response); }));}
    void SetMessageAllocatorFor_SplitTDN(
        ::grpc::MessageAllocator< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SplitTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::FourVarRequest* request, ::TDNSYSpkg::ThreeVarReply* response) { return this->ConsolidateTDN(context, request, response); }));}
    void SetMessageAllocatorFor_ConsolidateTDN(
        ::grpc::MessageAllocator< ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsolidateTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::TwoVarRequest* request, ::TDNSYSpkg::OneVarReply* response) { return this->ReqestTDNOwnership(context, request, response); }));}
    void SetMessageAllocatorFor_ReqestTDNOwnership(
        ::grpc::MessageAllocator< ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReqestTDNOwnership(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TDNSYSpkg::ThreeVarRequest* request, ::TDNSYSpkg::OneVarReply* response) { return this->SetTDNPin(context, request, response); }));}
    void SetMessageAllocatorFor_SetTDNPin(
        ::grpc::MessageAllocator< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTDNPin(
      ::grpc::CallbackServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitialIssue<WithCallbackMethod_ValidateTDN<WithCallbackMethod_RedeemTDN<WithCallbackMethod_SplitTDN<WithCallbackMethod_ConsolidateTDN<WithCallbackMethod_ReqestTDNOwnership<WithCallbackMethod_SetTDNPin<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitialIssue() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SplitTDN() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitialIssue() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialIssue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateTDN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRedeemTDN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SplitTDN() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitTDN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsolidateTDN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReqestTDNOwnership(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTDNPin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitialIssue() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitialIssue(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitialIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateTDN(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RedeemTDN(context, request, response); }));
    }
    ~WithRawCallbackMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RedeemTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SplitTDN() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SplitTDN(context, request, response); }));
    }
    ~WithRawCallbackMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SplitTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsolidateTDN(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsolidateTDN(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReqestTDNOwnership(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReqestTDNOwnership(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTDNPin(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTDNPin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitialIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitialIssue() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::InitalRequest, ::TDNSYSpkg::InitalReplay>* streamer) {
                       return this->StreamedInitialIssue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitialIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitialIssue(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::InitalRequest* /*request*/, ::TDNSYSpkg::InitalReplay* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialIssue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::InitalRequest,::TDNSYSpkg::InitalReplay>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateTDN() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::TwoVarReply>* streamer) {
                       return this->StreamedValidateTDN(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::TwoVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateTDN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::OneVarRequest,::TDNSYSpkg::TwoVarReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RedeemTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RedeemTDN() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::OneVarRequest, ::TDNSYSpkg::OneVarReply>* streamer) {
                       return this->StreamedRedeemTDN(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RedeemTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RedeemTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::OneVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRedeemTDN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::OneVarRequest,::TDNSYSpkg::OneVarReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SplitTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SplitTDN() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::FourVarReply>* streamer) {
                       return this->StreamedSplitTDN(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SplitTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SplitTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::FourVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSplitTDN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::ThreeVarRequest,::TDNSYSpkg::FourVarReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsolidateTDN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsolidateTDN() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::FourVarRequest, ::TDNSYSpkg::ThreeVarReply>* streamer) {
                       return this->StreamedConsolidateTDN(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsolidateTDN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsolidateTDN(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::FourVarRequest* /*request*/, ::TDNSYSpkg::ThreeVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsolidateTDN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::FourVarRequest,::TDNSYSpkg::ThreeVarReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReqestTDNOwnership : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReqestTDNOwnership() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::TwoVarRequest, ::TDNSYSpkg::OneVarReply>* streamer) {
                       return this->StreamedReqestTDNOwnership(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReqestTDNOwnership() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReqestTDNOwnership(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::TwoVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReqestTDNOwnership(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::TwoVarRequest,::TDNSYSpkg::OneVarReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTDNPin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTDNPin() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TDNSYSpkg::ThreeVarRequest, ::TDNSYSpkg::OneVarReply>* streamer) {
                       return this->StreamedSetTDNPin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTDNPin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTDNPin(::grpc::ServerContext* /*context*/, const ::TDNSYSpkg::ThreeVarRequest* /*request*/, ::TDNSYSpkg::OneVarReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTDNPin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TDNSYSpkg::ThreeVarRequest,::TDNSYSpkg::OneVarReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitialIssue<WithStreamedUnaryMethod_ValidateTDN<WithStreamedUnaryMethod_RedeemTDN<WithStreamedUnaryMethod_SplitTDN<WithStreamedUnaryMethod_ConsolidateTDN<WithStreamedUnaryMethod_ReqestTDNOwnership<WithStreamedUnaryMethod_SetTDNPin<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitialIssue<WithStreamedUnaryMethod_ValidateTDN<WithStreamedUnaryMethod_RedeemTDN<WithStreamedUnaryMethod_SplitTDN<WithStreamedUnaryMethod_ConsolidateTDN<WithStreamedUnaryMethod_ReqestTDNOwnership<WithStreamedUnaryMethod_SetTDNPin<Service > > > > > > > StreamedService;
};

}  // namespace TDNSYSpkg


#endif  // GRPC_prototype_2eproto__INCLUDED
